#include <framework.h>

// AUTOGENERATED - BEGIN
UINT_PTR functionPointer0 = 0;
UINT_PTR functionPointer1 = 0;
UINT_PTR functionPointer2 = 0;
UINT_PTR functionPointer3 = 0;
UINT_PTR functionPointer4 = 0;
UINT_PTR functionPointer5 = 0;
UINT_PTR functionPointer6 = 0;
UINT_PTR functionPointer7 = 0;
UINT_PTR functionPointer8 = 0;
UINT_PTR functionPointer9 = 0;
UINT_PTR functionPointer10 = 0;
UINT_PTR functionPointer11 = 0;
UINT_PTR functionPointer12 = 0;
UINT_PTR functionPointer13 = 0;
UINT_PTR functionPointer14 = 0;
UINT_PTR functionPointer15 = 0;
UINT_PTR functionPointer16 = 0;
UINT_PTR functionPointer17 = 0;
UINT_PTR functionPointer18 = 0;
UINT_PTR functionPointer19 = 0;
UINT_PTR functionPointer20 = 0;
UINT_PTR functionPointer21 = 0;
UINT_PTR functionPointer22 = 0;
UINT_PTR functionPointer23 = 0;
UINT_PTR functionPointer24 = 0;
UINT_PTR functionPointer25 = 0;
UINT_PTR functionPointer26 = 0;
UINT_PTR functionPointer27 = 0;
UINT_PTR functionPointer28 = 0;
UINT_PTR functionPointer29 = 0;
UINT_PTR functionPointer30 = 0;
UINT_PTR functionPointer31 = 0;
UINT_PTR functionPointer32 = 0;
UINT_PTR functionPointer33 = 0;
UINT_PTR functionPointer34 = 0;
UINT_PTR functionPointer35 = 0;
UINT_PTR functionPointer36 = 0;
UINT_PTR functionPointer37 = 0;
UINT_PTR functionPointer38 = 0;
UINT_PTR functionPointer39 = 0;
UINT_PTR functionPointer40 = 0;
UINT_PTR functionPointer41 = 0;
UINT_PTR functionPointer42 = 0;
UINT_PTR functionPointer43 = 0;
UINT_PTR functionPointer44 = 0;
UINT_PTR functionPointer45 = 0;
UINT_PTR functionPointer46 = 0;
UINT_PTR functionPointer47 = 0;
UINT_PTR functionPointer48 = 0;
UINT_PTR functionPointer49 = 0;
UINT_PTR functionPointer50 = 0;
UINT_PTR functionPointer51 = 0;
UINT_PTR functionPointer52 = 0;
UINT_PTR functionPointer53 = 0;
UINT_PTR functionPointer54 = 0;
UINT_PTR functionPointer55 = 0;
UINT_PTR functionPointer56 = 0;
UINT_PTR functionPointer57 = 0;
UINT_PTR functionPointer58 = 0;
UINT_PTR functionPointer59 = 0;
UINT_PTR functionPointer60 = 0;
UINT_PTR functionPointer61 = 0;
UINT_PTR functionPointer62 = 0;
UINT_PTR functionPointer63 = 0;
UINT_PTR functionPointer64 = 0;
UINT_PTR functionPointer65 = 0;
UINT_PTR functionPointer66 = 0;
UINT_PTR functionPointer67 = 0;
UINT_PTR functionPointer68 = 0;
UINT_PTR functionPointer69 = 0;
UINT_PTR functionPointer70 = 0;
UINT_PTR functionPointer71 = 0;
UINT_PTR functionPointer72 = 0;
UINT_PTR* functionPointers[] = { &functionPointer0, &functionPointer1, &functionPointer2, &functionPointer3, &functionPointer4, &functionPointer5, &functionPointer6, &functionPointer7, &functionPointer8, &functionPointer9, &functionPointer10, &functionPointer11, &functionPointer12, &functionPointer13, &functionPointer14, &functionPointer15, &functionPointer16, &functionPointer17, &functionPointer18, &functionPointer19, &functionPointer20, &functionPointer21, &functionPointer22, &functionPointer23, &functionPointer24, &functionPointer25, &functionPointer26, &functionPointer27, &functionPointer28, &functionPointer29, &functionPointer30, &functionPointer31, &functionPointer32, &functionPointer33, &functionPointer34, &functionPointer35, &functionPointer36, &functionPointer37, &functionPointer38, &functionPointer39, &functionPointer40, &functionPointer41, &functionPointer42, &functionPointer43, &functionPointer44, &functionPointer45, &functionPointer46, &functionPointer47, &functionPointer48, &functionPointer49, &functionPointer50, &functionPointer51, &functionPointer52, &functionPointer53, &functionPointer54, &functionPointer55, &functionPointer56, &functionPointer57, &functionPointer58, &functionPointer59, &functionPointer60, &functionPointer61, &functionPointer62, &functionPointer63, &functionPointer64, &functionPointer65, &functionPointer66, &functionPointer67, &functionPointer68, &functionPointer69, &functionPointer70, &functionPointer71, &functionPointer72 };

LPCSTR functionNames[] = { "BinkAllocateFrameBuffers", "BinkClose", "BinkCloseTrack", "BinkControlBackgroundIO", "BinkCopyToBuffer", "BinkCopyToBufferRect", "BinkDoFrame", "BinkDoFrameAsync", "BinkDoFrameAsyncMulti", "BinkDoFrameAsyncWait", "BinkDoFramePlane", "BinkFreeGlobals", "BinkGetError", "BinkGetFrameBuffersInfo", "BinkGetGPUDataBuffersInfo", "BinkGetKeyFrame", "BinkGetPlatformInfo", "BinkGetRealtime", "BinkGetRects", "BinkGetSummary", "BinkGetTrackData", "BinkGetTrackID", "BinkGetTrackMaxSize", "BinkGetTrackType", "BinkGoto", "BinkLogoAddress", "BinkNextFrame", "BinkOpen", "BinkOpenDirectSound", "BinkOpenMiles", "BinkOpenTrack", "BinkOpenWaveOut", "BinkOpenWithOptions", "BinkOpenXAudio2", "BinkOpenXAudio27", "BinkOpenXAudio28", "BinkPause", "BinkRegisterFrameBuffers", "BinkRegisterGPUDataBuffers", "BinkRequestStopAsyncThread", "BinkRequestStopAsyncThreadsMulti", "BinkService", "BinkSetError", "BinkSetFileOffset", "BinkSetFrameRate", "BinkSetIO", "BinkSetIOSize", "BinkSetMemory", "BinkSetOSFileCallbacks", "BinkSetPan", "BinkSetSimulate", "BinkSetSoundOnOff", "BinkSetSoundSystem", "BinkSetSoundSystem2", "BinkSetSoundTrack", "BinkSetSpeakerVolumes", "BinkSetVideoOnOff", "BinkSetVolume", "BinkSetWillLoop", "BinkShouldSkip", "BinkStartAsyncThread", "BinkUtilCPUs", "BinkUtilFree", "BinkUtilMalloc", "BinkUtilMutexCreate", "BinkUtilMutexDestroy", "BinkUtilMutexLock", "BinkUtilMutexLockTimeOut", "BinkUtilMutexUnlock", "BinkWait", "BinkWaitStopAsyncThread", "BinkWaitStopAsyncThreadsMulti", "RADTimerRead" };

extern "C"
{
	FUNCWRAPPER BinkAllocateFrameBuffers() { __asm__("jmp *functionPointer0"); }
	FUNCWRAPPER BinkClose() { __asm__("jmp *functionPointer1"); }
	FUNCWRAPPER BinkCloseTrack() { __asm__("jmp *functionPointer2"); }
	FUNCWRAPPER BinkControlBackgroundIO() { __asm__("jmp *functionPointer3"); }
	FUNCWRAPPER BinkCopyToBuffer() { __asm__("jmp *functionPointer4"); }
	FUNCWRAPPER BinkCopyToBufferRect() { __asm__("jmp *functionPointer5"); }
	FUNCWRAPPER BinkDoFrame() { __asm__("jmp *functionPointer6"); }
	FUNCWRAPPER BinkDoFrameAsync() { __asm__("jmp *functionPointer7"); }
	FUNCWRAPPER BinkDoFrameAsyncMulti() { __asm__("jmp *functionPointer8"); }
	FUNCWRAPPER BinkDoFrameAsyncWait() { __asm__("jmp *functionPointer9"); }
	FUNCWRAPPER BinkDoFramePlane() { __asm__("jmp *functionPointer10"); }
	FUNCWRAPPER BinkFreeGlobals() { __asm__("jmp *functionPointer11"); }
	FUNCWRAPPER BinkGetError() { __asm__("jmp *functionPointer12"); }
	FUNCWRAPPER BinkGetFrameBuffersInfo() { __asm__("jmp *functionPointer13"); }
	FUNCWRAPPER BinkGetGPUDataBuffersInfo() { __asm__("jmp *functionPointer14"); }
	FUNCWRAPPER BinkGetKeyFrame() { __asm__("jmp *functionPointer15"); }
	FUNCWRAPPER BinkGetPlatformInfo() { __asm__("jmp *functionPointer16"); }
	FUNCWRAPPER BinkGetRealtime() { __asm__("jmp *functionPointer17"); }
	FUNCWRAPPER BinkGetRects() { __asm__("jmp *functionPointer18"); }
	FUNCWRAPPER BinkGetSummary() { __asm__("jmp *functionPointer19"); }
	FUNCWRAPPER BinkGetTrackData() { __asm__("jmp *functionPointer20"); }
	FUNCWRAPPER BinkGetTrackID() { __asm__("jmp *functionPointer21"); }
	FUNCWRAPPER BinkGetTrackMaxSize() { __asm__("jmp *functionPointer22"); }
	FUNCWRAPPER BinkGetTrackType() { __asm__("jmp *functionPointer23"); }
	FUNCWRAPPER BinkGoto() { __asm__("jmp *functionPointer24"); }
	FUNCWRAPPER BinkLogoAddress() { __asm__("jmp *functionPointer25"); }
	FUNCWRAPPER BinkNextFrame() { __asm__("jmp *functionPointer26"); }
	FUNCWRAPPER BinkOpen() { __asm__("jmp *functionPointer27"); }
	FUNCWRAPPER BinkOpenDirectSound() { __asm__("jmp *functionPointer28"); }
	FUNCWRAPPER BinkOpenMiles() { __asm__("jmp *functionPointer29"); }
	FUNCWRAPPER BinkOpenTrack() { __asm__("jmp *functionPointer30"); }
	FUNCWRAPPER BinkOpenWaveOut() { __asm__("jmp *functionPointer31"); }
	FUNCWRAPPER BinkOpenWithOptions() { __asm__("jmp *functionPointer32"); }
	FUNCWRAPPER BinkOpenXAudio2() { __asm__("jmp *functionPointer33"); }
	FUNCWRAPPER BinkOpenXAudio27() { __asm__("jmp *functionPointer34"); }
	FUNCWRAPPER BinkOpenXAudio28() { __asm__("jmp *functionPointer35"); }
	FUNCWRAPPER BinkPause() { __asm__("jmp *functionPointer36"); }
	FUNCWRAPPER BinkRegisterFrameBuffers() { __asm__("jmp *functionPointer37"); }
	FUNCWRAPPER BinkRegisterGPUDataBuffers() { __asm__("jmp *functionPointer38"); }
	FUNCWRAPPER BinkRequestStopAsyncThread() { __asm__("jmp *functionPointer39"); }
	FUNCWRAPPER BinkRequestStopAsyncThreadsMulti() { __asm__("jmp *functionPointer40"); }
	FUNCWRAPPER BinkService() { __asm__("jmp *functionPointer41"); }
	FUNCWRAPPER BinkSetError() { __asm__("jmp *functionPointer42"); }
	FUNCWRAPPER BinkSetFileOffset() { __asm__("jmp *functionPointer43"); }
	FUNCWRAPPER BinkSetFrameRate() { __asm__("jmp *functionPointer44"); }
	FUNCWRAPPER BinkSetIO() { __asm__("jmp *functionPointer45"); }
	FUNCWRAPPER BinkSetIOSize() { __asm__("jmp *functionPointer46"); }
	FUNCWRAPPER BinkSetMemory() { __asm__("jmp *functionPointer47"); }
	FUNCWRAPPER BinkSetOSFileCallbacks() { __asm__("jmp *functionPointer48"); }
	FUNCWRAPPER BinkSetPan() { __asm__("jmp *functionPointer49"); }
	FUNCWRAPPER BinkSetSimulate() { __asm__("jmp *functionPointer50"); }
	FUNCWRAPPER BinkSetSoundOnOff() { __asm__("jmp *functionPointer51"); }
	FUNCWRAPPER BinkSetSoundSystem() { __asm__("jmp *functionPointer52"); }
	FUNCWRAPPER BinkSetSoundSystem2() { __asm__("jmp *functionPointer53"); }
	FUNCWRAPPER BinkSetSoundTrack() { __asm__("jmp *functionPointer54"); }
	FUNCWRAPPER BinkSetSpeakerVolumes() { __asm__("jmp *functionPointer55"); }
	FUNCWRAPPER BinkSetVideoOnOff() { __asm__("jmp *functionPointer56"); }
	FUNCWRAPPER BinkSetVolume() { __asm__("jmp *functionPointer57"); }
	FUNCWRAPPER BinkSetWillLoop() { __asm__("jmp *functionPointer58"); }
	FUNCWRAPPER BinkShouldSkip() { __asm__("jmp *functionPointer59"); }
	FUNCWRAPPER BinkStartAsyncThread() { __asm__("jmp *functionPointer60"); }
	FUNCWRAPPER BinkUtilCPUs() { __asm__("jmp *functionPointer61"); }
	FUNCWRAPPER BinkUtilFree() { __asm__("jmp *functionPointer62"); }
	FUNCWRAPPER BinkUtilMalloc() { __asm__("jmp *functionPointer63"); }
	FUNCWRAPPER BinkUtilMutexCreate() { __asm__("jmp *functionPointer64"); }
	FUNCWRAPPER BinkUtilMutexDestroy() { __asm__("jmp *functionPointer65"); }
	FUNCWRAPPER BinkUtilMutexLock() { __asm__("jmp *functionPointer66"); }
	FUNCWRAPPER BinkUtilMutexLockTimeOut() { __asm__("jmp *functionPointer67"); }
	FUNCWRAPPER BinkUtilMutexUnlock() { __asm__("jmp *functionPointer68"); }
	FUNCWRAPPER BinkWait() { __asm__("jmp *functionPointer69"); }
	FUNCWRAPPER BinkWaitStopAsyncThread() { __asm__("jmp *functionPointer70"); }
	FUNCWRAPPER BinkWaitStopAsyncThreadsMulti() { __asm__("jmp *functionPointer71"); }
	FUNCWRAPPER RADTimerRead() { __asm__("jmp *functionPointer72"); }
}
// AUTOGENERATED - END

const std::wstring pluginDir = L".\\plugins";
std::vector<HINSTANCE> loadedDlls;
HINSTANCE binkInstance = nullptr;
bool wasDllLoaded = false;

WINBOOL LoadPlugin(LPCWSTR libraryPath)
{
	try
	{
		HINSTANCE newLib = LoadLibrary(libraryPath);
		if(newLib == NULL)
			return 2;

		p_OnLoad funcAddr = (p_OnLoad)GetProcAddress(newLib, "OnLoad");
		if (funcAddr != 0)
			funcAddr();

		loadedDlls.push_back(newLib);
		return 0;
	}
	catch(std::exception& ex){}

	return 1;
}

void LoadPlugins()
{
	wasDllLoaded = true;
	WINBOOL errorCode; 
	WIN32_FIND_DATA findData;
	HANDLE foundHandle = FindFirstFile((pluginDir + L"\\*.dll").c_str(), &findData);

	if(foundHandle != INVALID_HANDLE_VALUE) do
	{
		if((findData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) != 0)
			continue;

		std::wstring errorMsg;
		errorCode = LoadPlugin((pluginDir + L"\\" + findData.cFileName).c_str());
		switch(errorCode)
		{
			case 1:
				errorMsg = L"LoadLibrary crashed on: ";
				MessageBox(NULL, (errorMsg + findData.cFileName).c_str(), L"ShadowOfWar.exe", 0);
			break;

			case 2:
				errorMsg = L"Can't load file: ";
				MessageBox(NULL, (errorMsg + findData.cFileName).c_str(), L"ShadowOfWar.exe", 0);
			break;

			default:
				break;
		}
	} while(errorCode == 0 && FindNextFile(foundHandle, &findData));
	FindClose(foundHandle);
}

_INITTERM_E mOrigFunc;
PVOID HookFunction(PVOID arg1, PVOID arg2)
{
	if(!wasDllLoaded)
		LoadPlugins();

	return mOrigFunc(arg1, arg2);
}

void HookLib()
{
	MH_Initialize();
	MH_CreateHookApi(L"api-ms-win-crt-runtime-l1-1-0.dll", "_initterm_e", (LPVOID)HookFunction, reinterpret_cast<LPVOID*>(&mOrigFunc));
	MH_EnableHook(MH_ALL_HOOKS);
}

void HookDisable()
{
	MH_Uninitialize();
	FreeLibrary(binkInstance);
	for(auto dll : loadedDlls)
		FreeLibrary(dll);
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD callReason, LPVOID lpReserved)
{
	if(callReason == DLL_PROCESS_ATTACH)
	{
		DisableThreadLibraryCalls(hModule);
		binkInstance = LoadLibrary(L"bink2w64_.dll");
		if(!binkInstance)
		{
			MessageBox(NULL, L"The bink2w64_.dll failed to load. Make sure you renamed the original according to the instructions.", L"ShadowOfWar.exe", 0);
			return FALSE;
		}

		for(int i=0; i<73; ++i)
			*functionPointers[i] = (UINT_PTR)GetProcAddress(binkInstance, functionNames[i]);

		HookLib();
	}
	else if(callReason == DLL_PROCESS_DETACH)
		HookDisable();

    return TRUE;
}